type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | ABS
  | TILDA
  | NOT
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | REM
  | CONJ
  | DISJ
  | EQ
  | GT
  | LT
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | COMMA
  | PROJ
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
# 33 "a3.ml"
let yytransl_const = [|
  260 (* ABS *);
  261 (* TILDA *);
  262 (* NOT *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIV *);
  267 (* REM *);
  268 (* CONJ *);
  269 (* DISJ *);
  270 (* EQ *);
  271 (* GT *);
  272 (* LT *);
  273 (* LP *);
  274 (* RP *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* FI *);
  279 (* COMMA *);
  280 (* PROJ *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\004\000\004\000\004\000\004\000\005\000\005\000\005\000\005\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\007\000\003\000\003\000\001\000\003\000\003\000\003\000\003\000\
\001\000\002\000\002\000\002\000\003\000\001\000\001\000\001\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\023\000\024\000\022\000\000\000\000\000\000\000\
\000\000\000\000\025\000\000\000\000\000\012\000\017\000\018\000\
\020\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\015\000\016\000\014\000\000\000\
\000\000\000\000\009\000"

let yydgoto = "\002\000\
\011\000\012\000\013\000\014\000\015\000"

let yysindex = "\255\255\
\021\255\000\000\000\000\000\000\000\000\085\255\085\255\085\255\
\021\255\021\255\000\000\127\000\053\255\000\000\000\000\000\000\
\000\000\000\000\037\255\059\255\085\255\085\255\085\255\085\255\
\085\255\085\255\085\255\085\255\000\000\085\255\085\255\085\255\
\085\255\000\000\085\255\053\255\053\255\053\255\053\255\053\255\
\053\255\053\255\053\255\000\000\000\000\000\000\000\000\083\255\
\085\255\009\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\029\000\043\000\057\000\071\000\
\085\000\099\000\113\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\023\000\237\255\004\000\000\000"

let yytablesize = 407
let yytable = "\001\000\
\002\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\016\000\017\000\018\000\000\000\000\000\003\000\048\000\
\000\000\030\000\031\000\032\000\033\000\003\000\004\000\005\000\
\006\000\007\000\008\000\000\000\004\000\050\000\051\000\019\000\
\020\000\044\000\045\000\046\000\047\000\009\000\000\000\010\000\
\000\000\000\000\005\000\021\000\022\000\000\000\000\000\000\000\
\000\000\023\000\024\000\025\000\026\000\000\000\034\000\000\000\
\008\000\000\000\000\000\027\000\028\000\030\000\031\000\032\000\
\033\000\021\000\022\000\000\000\000\000\000\000\007\000\023\000\
\024\000\025\000\026\000\000\000\000\000\000\000\035\000\000\000\
\000\000\027\000\028\000\000\000\006\000\003\000\004\000\005\000\
\006\000\007\000\008\000\030\000\031\000\032\000\033\000\000\000\
\000\000\000\000\010\000\000\000\000\000\009\000\000\000\049\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\002\000\000\000\000\000\000\000\000\000\002\000\002\000\002\000\
\002\000\000\000\002\000\000\000\002\000\003\000\003\000\002\000\
\002\000\000\000\000\000\003\000\003\000\003\000\003\000\000\000\
\003\000\000\000\003\000\004\000\004\000\003\000\003\000\000\000\
\000\000\004\000\004\000\004\000\004\000\000\000\004\000\000\000\
\004\000\005\000\005\000\004\000\004\000\000\000\000\000\005\000\
\005\000\005\000\005\000\000\000\005\000\000\000\005\000\008\000\
\008\000\005\000\005\000\000\000\000\000\008\000\008\000\008\000\
\008\000\000\000\008\000\000\000\008\000\007\000\007\000\008\000\
\008\000\000\000\000\000\007\000\007\000\007\000\007\000\000\000\
\007\000\000\000\007\000\006\000\006\000\007\000\007\000\000\000\
\000\000\006\000\006\000\006\000\006\000\000\000\006\000\000\000\
\006\000\010\000\010\000\006\000\006\000\000\000\000\000\010\000\
\010\000\010\000\010\000\000\000\010\000\000\000\010\000\011\000\
\011\000\010\000\010\000\000\000\000\000\011\000\011\000\011\000\
\011\000\000\000\011\000\000\000\011\000\021\000\022\000\011\000\
\011\000\000\000\000\000\023\000\024\000\025\000\026\000\000\000\
\000\000\000\000\000\000\000\000\000\000\027\000\028\000"

let yycheck = "\001\000\
\000\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\006\000\007\000\008\000\255\255\255\255\000\000\035\000\
\255\255\009\001\010\001\011\001\012\001\001\001\002\001\003\001\
\004\001\005\001\006\001\255\255\000\000\049\000\022\001\009\000\
\010\000\030\000\031\000\032\000\033\000\017\001\255\255\019\001\
\255\255\255\255\000\000\007\001\008\001\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\255\255\018\001\255\255\
\000\000\255\255\255\255\023\001\024\001\009\001\010\001\011\001\
\012\001\007\001\008\001\255\255\255\255\255\255\000\000\013\001\
\014\001\015\001\016\001\255\255\255\255\255\255\020\001\255\255\
\255\255\023\001\024\001\255\255\000\000\001\001\002\001\003\001\
\004\001\005\001\006\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\000\000\255\255\255\255\017\001\255\255\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\008\001\255\255\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\255\255\018\001\255\255\020\001\007\001\008\001\023\001\
\024\001\255\255\255\255\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\007\001\008\001\023\001\024\001\255\255\
\255\255\013\001\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\007\001\008\001\023\001\024\001\255\255\255\255\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\007\001\
\008\001\023\001\024\001\255\255\255\255\013\001\014\001\015\001\
\016\001\255\255\018\001\255\255\020\001\007\001\008\001\023\001\
\024\001\255\255\255\255\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\007\001\008\001\023\001\024\001\255\255\
\255\255\013\001\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\007\001\008\001\023\001\024\001\255\255\255\255\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\007\001\
\008\001\023\001\024\001\255\255\255\255\013\001\014\001\015\001\
\016\001\255\255\018\001\255\255\020\001\007\001\008\001\023\001\
\024\001\255\255\255\255\013\001\014\001\015\001\016\001\255\255\
\255\255\255\255\255\255\255\255\255\255\023\001\024\001"

let yynames_const = "\
  ABS\000\
  TILDA\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  REM\000\
  CONJ\000\
  DISJ\000\
  EQ\000\
  GT\000\
  LT\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  COMMA\000\
  PROJ\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 38 "a3.mly"
            ( _1 )
# 255 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'subexp) in
    Obj.repr(
# 42 "a3.mly"
                                          ( _1 )
# 262 "a3.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'subexp) in
    Obj.repr(
# 43 "a3.mly"
                                          ( Add(_1,_3) )
# 270 "a3.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'subexp) in
    Obj.repr(
# 44 "a3.mly"
                                          ( Sub(_1,_3) )
# 278 "a3.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'subexp) in
    Obj.repr(
# 45 "a3.mly"
                                          ( Disjunction(_1,_3) )
# 286 "a3.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'subexp) in
    Obj.repr(
# 46 "a3.mly"
                                          ( LessT(_1,_3) )
# 294 "a3.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'subexp) in
    Obj.repr(
# 47 "a3.mly"
                                          ( GreaterT(_1,_3) )
# 302 "a3.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'subexp) in
    Obj.repr(
# 48 "a3.mly"
                                          ( Equals(_1,_3) )
# 310 "a3.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'subexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'subexp) in
    Obj.repr(
# 49 "a3.mly"
                                          ( IfThenElse(_2,_4,_6))
# 319 "a3.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'subexp) in
    Obj.repr(
# 50 "a3.mly"
                                          ( GreaterTE(_1,_3) )
# 327 "a3.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'subexp) in
    Obj.repr(
# 51 "a3.mly"
                                          ( LessTE(_1,_3) )
# 335 "a3.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant1) in
    Obj.repr(
# 57 "a3.mly"
                                          ( _1 )
# 342 "a3.ml"
               : 'subexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'subexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constant1) in
    Obj.repr(
# 58 "a3.mly"
                                          ( Mult(_1,_3) )
# 350 "a3.ml"
               : 'subexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'subexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constant1) in
    Obj.repr(
# 59 "a3.mly"
                                          ( Conjunction(_1,_3) )
# 358 "a3.ml"
               : 'subexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'subexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constant1) in
    Obj.repr(
# 60 "a3.mly"
                                          ( Div(_1,_3) )
# 366 "a3.ml"
               : 'subexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'subexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constant1) in
    Obj.repr(
# 61 "a3.mly"
                                          ( Rem(_1,_3) )
# 374 "a3.ml"
               : 'subexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant2) in
    Obj.repr(
# 65 "a3.mly"
                                          ( _1 )
# 381 "a3.ml"
               : 'constant1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constant1) in
    Obj.repr(
# 66 "a3.mly"
                                          ( Abs(_2) )
# 388 "a3.ml"
               : 'constant1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constant1) in
    Obj.repr(
# 67 "a3.mly"
                                          ( Not(_2) )
# 395 "a3.ml"
               : 'constant1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constant1) in
    Obj.repr(
# 68 "a3.mly"
                                          ( Negative(_2) )
# 402 "a3.ml"
               : 'constant1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 71 "a3.mly"
                                          ( _2 )
# 409 "a3.ml"
               : 'constant2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "a3.mly"
                                          ( Var(_1) )
# 416 "a3.ml"
               : 'constant2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 73 "a3.mly"
                                          ( N(_1) )
# 423 "a3.ml"
               : 'constant2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 74 "a3.mly"
                                          ( B(_1))
# 430 "a3.ml"
               : 'constant2))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.exptree)
